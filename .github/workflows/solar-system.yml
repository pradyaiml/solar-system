name: Solar System Workflow

on:
  workflow_dispatch:
  push:
    branches:
    - main
    - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME}}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  unit-testing:
    name: Unit Testing
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        ports:
          - 27017:27017
    env:
      MONGO_URI: 'mongodb+srv://localhost:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    strategy:
      matrix:
        nodejs_version: [18, 20]
        operating_system: [ubuntu-latest, macos-latest]
        exclude:
        - nodejs_version: 18
          operating_system: macos-latest
    runs-on: ${{ matrix.operating_system }}
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.nodejs_version }}
    - name: Cache NPM dependencies
      uses: actions/cache@v4
      with:
        path: node_module
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json')}}
    - name: Install Dependencies
      run: npm install
    - name: Unit Testing
      id: nodejs-unit-testing-step
      run: npm test
    - name: Archive Test Result
      if: steps.nodejs-unit-testing-step.outcome == 'failure' || steps.nodejs-unit-testing-step.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: Mocha-Test-Result-${{ matrix.operating_system }}-${{ matrix.nodejs_version }}
        path: test-results.xml
  code-coverage:
    name: Code Coverage
    container:
      image: node:18
    services:
      mongo-db:
        image: siddharth67/mongo-db:non-prod
        options:
          --name mongo
    env:
      MONGO_URI: 'mongodb+srv://mongo:27017/superData'
      MONGO_USERNAME: non-prod-user
      MONGO_PASSWORD: non-prod-password
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    # - name: Setup NodeJS Version - 18
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: 18
    - name: Cache NPM dependencies
      uses: actions/cache@v4
      with:
        path: node_module
        key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json')}}
    - name: Install Dependencies
      run: npm install
    - name: Check Code Coverage
      continue-on-error: true
      run: npm run coverage
    - name: Archive Test Result
      uses: actions/upload-artifact@v4
      with:
        name: Code-Coverage-Result
        path: coverage
        retention-days: 5
  docker:
    name: Containerization
    needs: [code-coverage, unit-testing]
    permissions:
      packages: write
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: GHCR Login
      uses: docker/login-action@v2.2.0
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner}}
        password: ${{ secrets.GITHUB_TOKEN}}
    - name: Docker Build For Testing
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
    - name: Docker Image Testing
      run: |
        docker images
        docker run --name solar-system-aoo -d \
          -p 3000:3000 \
          -e MONGO_URI=$MONGI_URI \
          -e MONGO_USERNAME=$MONGO_USERNAME \
          -e MONGO_PASSWORD=$MONGO_PASSWORD \
          ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}

        export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
        echo $IP

        echo "Testing Image URL using wget"
        wget -q -O 127.0.0.1:3000/live | grep live
    - name: Container Registry Push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
          ghcr.io/${{ github.repository_owner}}/solar-system:${{ github.sha }}
  dev-deploy:
    if: contains(github.ref, 'feature/')
    needs: docker
    uses: ./.github/workflows/resuse-deployment.yml
    secrets:
      k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
      mongodb-password: ${{ secrets.MONGO_PASSWORD }}
    with:
      mongodb-uri: ${{ vars.MONGO_URI}}
      environment: development

  dev-integration-testing:
    if: contains(github.ref, 'feature/')
    name: Dev Integration Testing
    needs: dev-deploy
    runs-on: ubuntu-latest
    steps:
    - name: Test URL Output using CURL and JQ
      env:
        URL: ${{ needs.dev-deploy.outputs.application-url}}
      run: |
        echo $URL
        echo "---------------------------"
        curl https://$URL/live -s -k | jq -r .status | grep -i live
        dev-deploy:
          needs: docker
          environment:
            name: development
            url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}}
          outputs:
            APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}}
          runs-on: ubuntu-latest
          steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            - name: Install kubectl CLI
              uses: azure/setup-kubectl@v3
              with:
                version: 'v1.26.0'
            - name: Set Kubeconfig
              uses: azure/k8s-set-context@v3
              with:
                method: kubeconfig
                kubeconfig: ${{ secrets.KUBECONFIG }}
            - name: Fetch Kubernetes Cluster Details
              run: |
                kubectl version --short -o yaml
                echo ---------------------
                kubectl get nodes
            - name: Save Nginx Ingress Controller IP as a GITHUB Environment Variable
              run: |
                  echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV
            - name: Replace Tokens in Manifest files
              uses: cschleiden/replace-tokens@v1
              with:
                tokenPrefix: '_{_'
                tokenSuffix: '_}_'
                files: '["kubernetes/development/*.yaml"]'
              env:
                NAMESPACE: ${{ vars.NAMESPACE}}
                REPLICAS: ${{ vars.REPLICAS}}
                IMAGE: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
                INGRESS_IP: ${{ env.INGRESS_IP}}
            - name: Check files
              run: |
                cat kubernetes/development/*.yaml
            - name: Create MongoDB Secret
              run: |
                kubectl -n ${{ vars.NAMESPACE}} create secret generic mongo-db-creds \
                --from-literal=MONGO_URI=${{ env.MONGO_URI}}
                --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME}}
                --from-literal=MONGO_PASSWORD=${{ env.MONGO_PASSWORD}}
                --save-config \
                --dry-run=client \
                -o yaml | kubectl apply -f -
            - name: Deploy to Dev Env
              run: |
                kubectl apply -f kubernetes/development
            - name: Set App Ingress Host URL
              id: set-ingress-host-address
              run: |
                  echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE}} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> $GITHUB_OUTPUT
        dev-integration-testing:
          name: Dev Integration Testing
          needs: dev-deploy
          runs-on: ubuntu-latest
          steps:
          - name: Test URL Output using CURL and JQ
            env:
              URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL}}
            run: |
              echo $URL
              echo "---------------------------"
              curl https://$URL/live -s -k | jq -r .status | grep -i live
  prod-deploy:
    if: github.ref == 'refs/heads/main'
    needs: docker
    uses: ./.github/workflows/resuse-deployment.yml
    secrets:
      k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
      mongodb-password: ${{ secrets.MONGO_PASSWORD }}
    with:
      mongodb-uri: ${{ vars.MONGO_URI}}
      environment: production

  prod-integration-testing:
    if: github.ref == 'refs/heads/main'
    name: Dev Integration Testing
    needs: prod-deploy
    runs-on: ubuntu-latest
    steps:
    - name: Test URL Output using CURL and JQ
      env:
        URL: ${{ needs.prod-deploy.outputs.application-url}}
      run: |
        echo $URL
        echo "---------------------------"
        curl https://$URL/live -s -k | jq -r .status | grep -i live
        
        dev-deploy:
          needs: docker
          environment:
            name: development
            url: https://${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}}
          outputs:
            APP_INGRESS_URL: ${{ steps.set-ingress-host-address.outputs.APP_INGRESS_HOST}}
          runs-on: ubuntu-latest
          steps:
            - name: Checkout Repository
              uses: actions/checkout@v4
            - name: Install kubectl CLI
              uses: azure/setup-kubectl@v3
              with:
                version: 'v1.26.0'
            - name: Set Kubeconfig
              uses: azure/k8s-set-context@v3
              with:
                method: kubeconfig
                kubeconfig: ${{ secrets.KUBECONFIG }}
            - name: Fetch Kubernetes Cluster Details
              run: |
                kubectl version --short -o yaml
                echo ---------------------
                kubectl get nodes
            - name: Save Nginx Ingress Controller IP as a GITHUB Environment Variable
              run: |
                  echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jsonpath="{status.loadBalancer.ingress[0].ip}")" >> $GITHUB_ENV
            - name: Replace Tokens in Manifest files
              uses: cschleiden/replace-tokens@v1
              with:
                tokenPrefix: '_{_'
                tokenSuffix: '_}_'
                files: '["kubernetes/development/*.yaml"]'
              env:
                NAMESPACE: ${{ vars.NAMESPACE}}
                REPLICAS: ${{ vars.REPLICAS}}
                IMAGE: ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}
                INGRESS_IP: ${{ env.INGRESS_IP}}
            - name: Check files
              run: |
                cat kubernetes/development/*.yaml
            - name: Create MongoDB Secret
              run: |
                kubectl -n ${{ vars.NAMESPACE}} create secret generic mongo-db-creds \
                --from-literal=MONGO_URI=${{ env.MONGO_URI}}
                --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME}}
                --from-literal=MONGO_PASSWORD=${{ env.MONGO_PASSWORD}}
                --save-config \
                --dry-run=client \
                -o yaml | kubectl apply -f -
            - name: Deploy to Dev Env
              run: |
                kubectl apply -f kubernetes/development
            - name: Set App Ingress Host URL
              id: set-ingress-host-address
              run: |
                  echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE}} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> $GITHUB_OUTPUT
        dev-integration-testing:
          name: Dev Integration Testing
          needs: dev-deploy
          runs-on: ubuntu-latest
          steps:
          - name: Test URL Output using CURL and JQ
            env:
              URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_URL}}
            run: |
              echo $URL
              echo "---------------------------"
              curl https://$URL/live -s -k | jq -r .status | grep -i live